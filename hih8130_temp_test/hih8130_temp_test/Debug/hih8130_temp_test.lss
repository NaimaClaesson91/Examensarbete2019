
hih8130_temp_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000126  000001ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000126  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800104  00800104  000001be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000072c  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000697  00000000  00000000  0000097c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000259  00000000  00000000  00001013  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  0000126c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a5  00000000  00000000  00001290  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001635  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e2       	ldi	r30, 0x26	; 38
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 30       	cpi	r26, 0x0A	; 10
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 91 00 	jmp	0x122	; 0x122 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
int main(void)
{
    
    while (1) 
    {
		printf("Hej\n");
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	0e 94 61 00 	call	0xc2	; 0xc2 <puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	87 ea       	ldi	r24, 0xA7	; 167
  b2:	91 e6       	ldi	r25, 0x61	; 97
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0xe>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x18>
  be:	00 00       	nop
  c0:	f2 cf       	rjmp	.-28     	; 0xa6 <main>

000000c2 <puts>:
  c2:	0f 93       	push	r16
  c4:	1f 93       	push	r17
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <__data_end+0x2>
  ce:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <__data_end+0x3>
  d2:	23 81       	ldd	r18, Z+3	; 0x03
  d4:	21 ff       	sbrs	r18, 1
  d6:	1b c0       	rjmp	.+54     	; 0x10e <puts+0x4c>
  d8:	8c 01       	movw	r16, r24
  da:	d0 e0       	ldi	r29, 0x00	; 0
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	f8 01       	movw	r30, r16
  e0:	81 91       	ld	r24, Z+
  e2:	8f 01       	movw	r16, r30
  e4:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <__data_end+0x2>
  e8:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <__data_end+0x3>
  ec:	db 01       	movw	r26, r22
  ee:	18 96       	adiw	r26, 0x08	; 8
  f0:	ed 91       	ld	r30, X+
  f2:	fc 91       	ld	r31, X
  f4:	19 97       	sbiw	r26, 0x09	; 9
  f6:	88 23       	and	r24, r24
  f8:	31 f0       	breq	.+12     	; 0x106 <puts+0x44>
  fa:	09 95       	icall
  fc:	89 2b       	or	r24, r25
  fe:	79 f3       	breq	.-34     	; 0xde <puts+0x1c>
 100:	df ef       	ldi	r29, 0xFF	; 255
 102:	cf ef       	ldi	r28, 0xFF	; 255
 104:	ec cf       	rjmp	.-40     	; 0xde <puts+0x1c>
 106:	8a e0       	ldi	r24, 0x0A	; 10
 108:	09 95       	icall
 10a:	89 2b       	or	r24, r25
 10c:	19 f0       	breq	.+6      	; 0x114 <puts+0x52>
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	9f ef       	ldi	r25, 0xFF	; 255
 112:	02 c0       	rjmp	.+4      	; 0x118 <puts+0x56>
 114:	8d 2f       	mov	r24, r29
 116:	9c 2f       	mov	r25, r28
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	1f 91       	pop	r17
 11e:	0f 91       	pop	r16
 120:	08 95       	ret

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
